<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.medical.mapper.AbnormalorderMapper" >
  <resultMap id="BaseResultMap" type="com.medical.po.Abnormalorder" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="abnormalOrderId" property="abnormalorderid" jdbcType="INTEGER" />
    <result column="abnormalOrderPayId" property="abnormalorderpayid" jdbcType="INTEGER" />
    <result column="abnormalOrderType" property="abnormalordertype" jdbcType="INTEGER" />
    <result column="abnormalOrderCreatTime" property="abnormalordercreattime" jdbcType="TIMESTAMP" />
    <result column="abnormalOrderEndTime" property="abnormalorderendtime" jdbcType="TIMESTAMP" />
    <result column="abnormalOrderReason" property="abnormalorderreason" jdbcType="VARCHAR" />
    <result column="abnormalOrderIsSolve" property="abnormalorderissolve" jdbcType="BIT" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, abnormalOrderId, abnormalOrderPayId, abnormalOrderType, abnormalOrderCreatTime, 
    abnormalOrderEndTime, abnormalOrderReason, abnormalOrderIsSolve
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.medical.po.AbnormalorderExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from abnormalorder
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from abnormalorder
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from abnormalorder
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.medical.po.AbnormalorderExample" >
    delete from abnormalorder
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.medical.po.Abnormalorder" >
    insert into abnormalorder (id, abnormalOrderId, abnormalOrderPayId, 
      abnormalOrderType, abnormalOrderCreatTime, 
      abnormalOrderEndTime, abnormalOrderReason, 
      abnormalOrderIsSolve)
    values (#{id,jdbcType=INTEGER}, #{abnormalorderid,jdbcType=INTEGER}, #{abnormalorderpayid,jdbcType=INTEGER}, 
      #{abnormalordertype,jdbcType=INTEGER}, #{abnormalordercreattime,jdbcType=TIMESTAMP}, 
      #{abnormalorderendtime,jdbcType=TIMESTAMP}, #{abnormalorderreason,jdbcType=VARCHAR}, 
      #{abnormalorderissolve,jdbcType=BIT})
  </insert>
  <insert id="insertSelective" parameterType="com.medical.po.Abnormalorder" >
    insert into abnormalorder
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="abnormalorderid != null" >
        abnormalOrderId,
      </if>
      <if test="abnormalorderpayid != null" >
        abnormalOrderPayId,
      </if>
      <if test="abnormalordertype != null" >
        abnormalOrderType,
      </if>
      <if test="abnormalordercreattime != null" >
        abnormalOrderCreatTime,
      </if>
      <if test="abnormalorderendtime != null" >
        abnormalOrderEndTime,
      </if>
      <if test="abnormalorderreason != null" >
        abnormalOrderReason,
      </if>
      <if test="abnormalorderissolve != null" >
        abnormalOrderIsSolve,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="abnormalorderid != null" >
        #{abnormalorderid,jdbcType=INTEGER},
      </if>
      <if test="abnormalorderpayid != null" >
        #{abnormalorderpayid,jdbcType=INTEGER},
      </if>
      <if test="abnormalordertype != null" >
        #{abnormalordertype,jdbcType=INTEGER},
      </if>
      <if test="abnormalordercreattime != null" >
        #{abnormalordercreattime,jdbcType=TIMESTAMP},
      </if>
      <if test="abnormalorderendtime != null" >
        #{abnormalorderendtime,jdbcType=TIMESTAMP},
      </if>
      <if test="abnormalorderreason != null" >
        #{abnormalorderreason,jdbcType=VARCHAR},
      </if>
      <if test="abnormalorderissolve != null" >
        #{abnormalorderissolve,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.medical.po.AbnormalorderExample" resultType="java.lang.Integer" >
    select count(*) from abnormalorder
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update abnormalorder
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.abnormalorderid != null" >
        abnormalOrderId = #{record.abnormalorderid,jdbcType=INTEGER},
      </if>
      <if test="record.abnormalorderpayid != null" >
        abnormalOrderPayId = #{record.abnormalorderpayid,jdbcType=INTEGER},
      </if>
      <if test="record.abnormalordertype != null" >
        abnormalOrderType = #{record.abnormalordertype,jdbcType=INTEGER},
      </if>
      <if test="record.abnormalordercreattime != null" >
        abnormalOrderCreatTime = #{record.abnormalordercreattime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.abnormalorderendtime != null" >
        abnormalOrderEndTime = #{record.abnormalorderendtime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.abnormalorderreason != null" >
        abnormalOrderReason = #{record.abnormalorderreason,jdbcType=VARCHAR},
      </if>
      <if test="record.abnormalorderissolve != null" >
        abnormalOrderIsSolve = #{record.abnormalorderissolve,jdbcType=BIT},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update abnormalorder
    set id = #{record.id,jdbcType=INTEGER},
      abnormalOrderId = #{record.abnormalorderid,jdbcType=INTEGER},
      abnormalOrderPayId = #{record.abnormalorderpayid,jdbcType=INTEGER},
      abnormalOrderType = #{record.abnormalordertype,jdbcType=INTEGER},
      abnormalOrderCreatTime = #{record.abnormalordercreattime,jdbcType=TIMESTAMP},
      abnormalOrderEndTime = #{record.abnormalorderendtime,jdbcType=TIMESTAMP},
      abnormalOrderReason = #{record.abnormalorderreason,jdbcType=VARCHAR},
      abnormalOrderIsSolve = #{record.abnormalorderissolve,jdbcType=BIT}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.medical.po.Abnormalorder" >
    update abnormalorder
    <set >
      <if test="abnormalorderid != null" >
        abnormalOrderId = #{abnormalorderid,jdbcType=INTEGER},
      </if>
      <if test="abnormalorderpayid != null" >
        abnormalOrderPayId = #{abnormalorderpayid,jdbcType=INTEGER},
      </if>
      <if test="abnormalordertype != null" >
        abnormalOrderType = #{abnormalordertype,jdbcType=INTEGER},
      </if>
      <if test="abnormalordercreattime != null" >
        abnormalOrderCreatTime = #{abnormalordercreattime,jdbcType=TIMESTAMP},
      </if>
      <if test="abnormalorderendtime != null" >
        abnormalOrderEndTime = #{abnormalorderendtime,jdbcType=TIMESTAMP},
      </if>
      <if test="abnormalorderreason != null" >
        abnormalOrderReason = #{abnormalorderreason,jdbcType=VARCHAR},
      </if>
      <if test="abnormalorderissolve != null" >
        abnormalOrderIsSolve = #{abnormalorderissolve,jdbcType=BIT},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.medical.po.Abnormalorder" >
    update abnormalorder
    set abnormalOrderId = #{abnormalorderid,jdbcType=INTEGER},
      abnormalOrderPayId = #{abnormalorderpayid,jdbcType=INTEGER},
      abnormalOrderType = #{abnormalordertype,jdbcType=INTEGER},
      abnormalOrderCreatTime = #{abnormalordercreattime,jdbcType=TIMESTAMP},
      abnormalOrderEndTime = #{abnormalorderendtime,jdbcType=TIMESTAMP},
      abnormalOrderReason = #{abnormalorderreason,jdbcType=VARCHAR},
      abnormalOrderIsSolve = #{abnormalorderissolve,jdbcType=BIT}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>